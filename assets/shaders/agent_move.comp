#version 450 core

#define PI 3.1415926535

layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

struct Agent
{
    vec2 position;
    float angle;
    float padding;
};

layout (std430, binding = 0) buffer agent_buffer {
    Agent agents[];
};

layout(rgba32f, binding = 0) uniform image2D trail_image;
layout(r32ui, binding = 1) uniform uimage2D agent_image;

uniform layout(location = 2) ivec2 bounds;
uniform layout(location = 3) float dt;
uniform layout(location = 4) float time;
uniform layout(location = 5) int num_agents;

uniform layout(location = 6) float move_speed;
uniform layout(location = 7) float turn_speed;
uniform layout(location = 8) float trail_weight;
uniform layout(location = 9) float sense_spacing;
uniform layout(location = 10) int sense_distance;
uniform layout(location = 11) int sense_size;

float mid(float lower, float value, float upper)
{
    return max(lower, min(value, upper));
}

float to_rad(float deg)
{
    return deg * PI / 180.0;
}

uint hash(uint state)
{
    state ^= 2747636419u;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    return state;
}

float scale_to_unit(uint value)
{
    return value / 4294967295.0;
}

float sense(Agent agent, float angle_offset)
{
    float sense_angle = agent.angle + angle_offset;
    vec2 sense_direction = vec2(cos(sense_angle), sin(sense_angle));

    ivec2 sense_center =
        ivec2(agent.position + sense_direction * sense_distance);

    float sum = 0.0;
    for (int ox = -sense_size; ox <= sense_size; ox++)
    {
        for (int oy = -sense_size; oy <= sense_size; oy++)
        {
            int x = int(mid(0.0, sense_center.x + ox, bounds.x - 1.0));
            int y = int(mid(0, sense_center.y + oy, bounds.y - 1.0));

            sum += dot(vec4(1.0), imageLoad(trail_image, ivec2(x, y)));
        }
    }

    return sum;
}

bool try_move(uint id, ivec2 position)
{
    uint prev_id = imageAtomicCompSwap(agent_image, position, 0, id + 1);
    return prev_id == 0;
}

void main()
{
	uint id = gl_GlobalInvocationID.x;
    if (id >= num_agents)
    {
        return;
    }

    Agent agent = agents[id];

    uint rand = hash(uint(
                agent.position.x +
                agent.position.y * bounds.x +
                time * 10000.0));

    vec2 new_position = agent.position;
    float new_angle = agent.angle;

    float random_angle = scale_to_unit(rand) * 2.0 * PI;

    vec2 velocity = vec2(cos(agent.angle), sin(agent.angle)) * move_speed;
    new_position += velocity * dt;

    if (new_position.x < 0 || new_position.x >= bounds.x ||
            new_position.y < 0 || new_position.y >= bounds.y)
    {
        new_position.x = mid(0.0, new_position.x, bounds.x - 1.0);
        new_position.y = mid(0.0, new_position.y, bounds.y - 1.0);
        new_angle = random_angle;
    }

    ivec2 prev_pixel_position = ivec2(agent.position);
    ivec2 new_pixel_position = ivec2(new_position);

    if (prev_pixel_position != new_pixel_position)
    {
        bool did_move = try_move(id, new_pixel_position);
        if (did_move)
        {
            imageStore(agent_image, prev_pixel_position, ivec4(0));

            vec4 prev_trail = imageLoad(trail_image, new_pixel_position);
            vec4 new_trail = min(vec4(1.0), prev_trail + vec4(trail_weight) * dt);
            imageStore(trail_image, new_pixel_position, new_trail);
        }
        else
        {
            new_angle = random_angle;
        }
    }

    agents[id].position = new_position;
    agents[id].angle = new_angle;
}
