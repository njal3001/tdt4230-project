#version 450 core

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(rgba32f, binding = 0) uniform image2D input_image;
layout(rgba32f, binding = 2) uniform image2D output_image;

layout(rgba32f, binding = 0) uniform image2D trail_image;
layout(rgba32f, binding = 1) uniform image2D diffused_trail_image;
layout(rgba32f, binding = 2) uniform image2D agent_image;
layout(r32ui, binding = 3) uniform uimage2D occupied_image;
layout(rgba32f, binding = 4) uniform image2D wall_image;

uniform layout(location = 0) ivec2 bounds;
uniform layout(location = 1) float dt;
uniform layout(location = 2) float time;

uniform layout(location = 3) float diffuse_speed;
uniform layout(location = 4) float decay_speed;

void main()
{
	uvec3 id = gl_GlobalInvocationID;

    if (id.x >= bounds.x || id.y >= bounds.y)
    {
        return;
    }

    vec4 sum = vec4(0.0);
    for (int oy = -1; oy <= 1; oy++)
    {
        for (int ox = -1; ox <= 1; ox++)
        {
            int x = ox + int(id.x);
            int y = oy + int(id.y);

            if (x >= 0 && x < bounds.x && y >= 0 && y < bounds.y)
            {
                sum += imageLoad(trail_image, ivec2(x, y));
            }
        }
    }

    vec4 current_value = imageLoad(trail_image, ivec2(id.x, id.y));

    vec4 average = sum / 9.0;

    // TODO: Better way to interpolate?
    average = mix(current_value, average, min(1.0, diffuse_speed * dt));

    vec4 diffused = max(vec4(0.0), average - decay_speed * dt);

    imageStore(diffused_trail_image, ivec2(id.x, id.y), diffused);
}
