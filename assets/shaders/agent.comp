#version 450 core

#define PI 3.1415926535

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

struct Agent
{
    vec2 position;
    float angle;
    float padding;
};

layout (std430, binding = 0) buffer agent_buffer {
    Agent agents[];
};

layout(rgba32f, binding = 0) uniform image2D trail_image;
layout(rgba32f, binding = 1) uniform image2D diffused_trail_image;
layout(r32ui, binding = 2) uniform uimage2D occupied_image;
layout(rgba32f, binding = 3) uniform image2D agent_image;
layout(rgba32f, binding = 4) uniform image2D wall_image;

uniform layout(location = 0) ivec2 bounds;
uniform layout(location = 1) float dt;
uniform layout(location = 2) float time;
uniform layout(location = 3) int num_agents;

uniform layout(location = 4) float move_speed;
uniform layout(location = 5) float turn_amount;
uniform layout(location = 6) float trail_weight;
uniform layout(location = 7) float sense_spacing;
uniform layout(location = 8) int sense_distance;
uniform layout(location = 9) int sense_size;

float to_rad(float deg)
{
    return deg * PI / 180.0;
}

float mid(float lower, float value, float upper)
{
    return max(lower, min(value, upper));
}

uint hash(uint state)
{
    state ^= 2747636419u;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    return state;
}

float scale_to_unit(uint value)
{
    return value / 4294967295.0;
}

float sense(Agent agent, float angle_offset)
{
    float sense_angle = agent.angle + angle_offset;
    vec2 sense_direction = vec2(cos(sense_angle), sin(sense_angle));

    ivec2 sense_center =
        ivec2(agent.position + sense_direction * sense_distance);

    float sum = 0.0;
    for (int ox = -sense_size; ox <= sense_size; ox++)
    {
        for (int oy = -sense_size; oy <= sense_size; oy++)
        {
            int x = int(mid(0.0, sense_center.x + ox, bounds.x - 1.0));
            int y = int(mid(0.0, sense_center.y + oy, bounds.y - 1.0));

            sum += dot(vec4(1.0f), imageLoad(trail_image, ivec2(x, y)));
        }
    }

    return sum;
}

bool try_move(uint id, ivec2 position, ivec2 previous_position)
{
    if (position == previous_position)
    {
        return true;
    }

    // Check for walls
    float wall = imageLoad(wall_image, position).a;
    if (wall > 0.0)
    {
        return false;
    }

    // Check if target position is vacant
    uint prev_id = imageAtomicCompSwap(occupied_image, position, 0, id + 1);
    if (prev_id == 0)
    {
        // Mark previous position as vacant
        imageStore(occupied_image, previous_position, ivec4(0));
        return true;
    }

    return false;
}

void main()
{
	ivec2 pixel_position = ivec2(gl_GlobalInvocationID.xy);
    if (pixel_position.x >= bounds.x || pixel_position.y >= bounds.y)
    {
        return;
    }

    uint occupied = imageLoad(occupied_image,
            ivec2(pixel_position.x, pixel_position.y)).x;
    if (occupied == 0)
    {
        return;
    }

	uint id = occupied - 1;

    Agent agent = agents[id];

    uint rand = hash(uint(
                agent.position.x +
                agent.position.y * bounds.x +
                time * 10000.0));

    float random_angle = scale_to_unit(rand) * 2.0 * PI;

    vec2 new_position = agent.position;
    float new_angle = agent.angle;

    vec2 velocity = vec2(cos(agent.angle), sin(agent.angle)) * move_speed;
    new_position += velocity * dt;

    if (new_position.x <= 0.0 || new_position.x > bounds.x - 1.0 ||
            new_position.y <= 0.0 || new_position.y > bounds.y - 1.0)
    {
        new_position.x = mid(0.0, new_position.x, bounds.x - 1.0);
        new_position.y = mid(0.0, new_position.y, bounds.y - 1.0);

        new_angle = random_angle;
    }

    ivec2 new_pixel_position = ivec2(new_position);

    bool did_move = try_move(id, new_pixel_position, pixel_position);
    if (did_move)
    {
        vec4 prev_trail = imageLoad(trail_image, pixel_position);
        vec4 new_trail = prev_trail + trail_weight * dt;
        imageStore(trail_image, new_pixel_position, new_trail);
    }
    else
    {
        new_position = agent.position;
        new_angle = random_angle;
    }

    float sense_spacing_rad = to_rad(sense_spacing);
    float sense_forward = sense(agent, 0.0);
    float sense_right = sense(agent, sense_spacing_rad);
    float sense_left = sense(agent, -sense_spacing_rad);

    float turn_amount_rad = to_rad(turn_amount);
    float random_turn_weight = scale_to_unit(rand);

    if (sense_forward > sense_right && sense_forward > sense_left)
    {
        new_angle += 0.0;
    }
    else if (sense_forward < sense_right && sense_forward < sense_left)
    {
        new_angle += (1.0 - 2.0 * step(random_turn_weight, 0.5)) *
            turn_amount_rad;
    }
    else if (sense_left < sense_right)
    {
        new_angle += turn_amount_rad;
    }
    else if (sense_right < sense_left)
    {
        new_angle -= turn_amount_rad;
    }

    agents[id].position = new_position;
    agents[id].angle = new_angle;
}
