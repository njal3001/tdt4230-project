#version 450 core

layout (local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

struct Agent
{
    vec2 position;
    vec2 velocity;
};

layout (std430, binding = 0) buffer agent_buffer {
    Agent agents[];
};

layout(rgba32f, binding = 0) uniform image2D agent_image;

uniform layout(location = 2) int num_agents;
uniform layout(location = 3) float dt;

void main()
{
	uint id = gl_GlobalInvocationID.x;
    if (id >= num_agents)
    {
        return;
    }

    ivec2 bounds = imageSize(agent_image);

    agents[id].position += agents[id].velocity * dt;

    ivec2 pixel_position = ivec2(agents[id].position);

    if (agents[id].position.x < 0.0)
    {
        agents[id].position.x = 0.0;
        agents[id].velocity.x *= -1.0;
    }
    else if (agents[id].position.x >= bounds.x - 1)
    {
        agents[id].position.x = bounds.x - 1;
        agents[id].velocity.x *= -1.0;
    }
    if (agents[id].position.y < 0.0)
    {
        agents[id].position.y = 0.0;
        agents[id].velocity.y *= -1.0;
    }
    else if (agents[id].position.y >= bounds.y - 1)
    {
        agents[id].position.y = bounds.y - 1;
        agents[id].velocity.y *= -1.0;
    }

    imageStore(agent_image, pixel_position, vec4(1.0));

}
